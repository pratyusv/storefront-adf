package oracle.fod.storefront.module;

import oracle.fod.storefront.entity.OrderEOImpl;

import oracle.fod.storefront.module.common.FODShoppingCartAM;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 08 17:07:42 MDT 2008
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FODShoppingCartAMImpl extends BaseApplicationModuleImpl implements FODShoppingCartAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FODShoppingCartAMImpl() {
    }

    /**
     * Container's getter for ShoppingCart1.
     * @return ShoppingCart1
     */
    public ViewObjectImpl getShoppingCart1() {
        return (ViewObjectImpl)findViewObject("ShoppingCart1");
    }


    /*    public void init() {
      DBTransactionImpl trx = (DBTransactionImpl)getDBTransaction();
      ApplicationModuleImpl am =  (ApplicationModuleImpl)trx.getRootApplicationModule();
      String user = am.getUserPrincipalName();
      System.out.println("The session user is: " + user);
      ViewObjectImpl vo;
      vo = getShoppingCart1();
      String bindUser = (String)vo.getNamedWhereClauseParam("CurrentUser");
      if (! user.equals(bindUser)) {
        vo.setNamedWhereClauseParam("CurrentUser", user);
        /* The ShoppingCart is guaranteed to only have one row.
        * However, we may not always properly initialize this
        * from the UI because the actual row from ShoppingCart is
        * not really needed. The following initializes the view
        * object so that the view link to the shopping cart items
        * properly works.
        */
/*        vo.executeQuery();
        Row cart = vo.first();
        if (cart == null) {
          cart = vo.createRow();
          // TODO: Need to finish this off.
          cart.setAttribute("OrderDate", ((DBTransactionImpl)getDBTransaction()).getCurrentDbTime());
          cart.setAttribute("OrderStatusCode", "CART");
          vo.insertRow(cart);
        }
      }
    } */
    
    public void addItemToCart(Number productId) {
       init();
       ViewObject shoppingCartVO = getShoppingCart1();
       assert shoppingCartVO != null;

       ViewRowImpl shoppingCartRow = (ViewRowImpl)shoppingCartVO.first();
       assert shoppingCartRow != null;

       OrderEOImpl orderEO = (OrderEOImpl)shoppingCartRow.getEntity(0);
      orderEO.addItemToOrder(productId);
    }
    /**
         * Clear the shopping cart for the current user.
         */
        public void clearCart() {
            init(); 
            ViewObject shoppingCartVO = getShoppingCart1();
            assert shoppingCartVO != null;

            ViewRowImpl shoppingCartRow = (ViewRowImpl)shoppingCartVO.first();
            assert shoppingCartRow != null;

            OrderEOImpl orderEO = (OrderEOImpl)shoppingCartRow.getEntity(0);
            orderEO.clearOrder();
        }
    
    public void init() {
            outputStructure();
            
            /* TODO:
             * This is something that needs to change.
             * This is (sort of) a hack version of security. There must be a better way to
             * do this. Either way, need to check to see if prepareSession is the proper
             * place or if there are better locations for this.
             * */
            DBTransactionImpl trx = (DBTransactionImpl)getDBTransaction();
            ApplicationModuleImpl am =
                (ApplicationModuleImpl)trx.getRootApplicationModule();
            String user = am.getUserPrincipalName();
                        ViewObjectImpl vo;
            vo = getShoppingCart1();
            String bindUser = (String)vo.getNamedWhereClauseParam("CurrentUser");
           if (! user.equals(bindUser)) {
                vo.setNamedWhereClauseParam("CurrentUser", user);
                
                /* The ShoppingCart is guarateed to only have one row.
                 * However, we may not always properly initialize this 
                 * from the UI because the actual row from ShoppingCart is not
                 * really needed. The following initializes the view object
                 * so that the view link to the shopping cart items properly
                 * work.
                 */
                vo.executeQuery();
                Row cart = vo.first();
                System.out.println("The user is " + user);                
                System.out.println(cart.toString());
                if (cart == null) {
                    cart = vo.createRow();
                    
                    // TODO: Need to finish this off.
                    cart.setAttribute("OrderDate", ((DBTransactionImpl)getDBTransaction()).getCurrentDbTime());
                    cart.setAttribute("OrderStatusCode", "CART");
                    //cart.setAttribute("CustomerId", getCurrentUserId());
                    
                    vo.insertRow(cart);
               }

            }
        }


        public void refreshShoppingCart() {
            // This method is used only to invoke a contextual event
            System.out.println(this);
            System.out.println("Refresh Shopping Cart"); // Added to provide a breakpoint location
        }
        
        public void executeRefresh() {
            //
            System.out.println(this);
            System.out.println("Execute refresh");
            getShoppingCartItem1().executeQuery();
        }


    /**
     * Container's getter for ShoppingCartItemVO1.
     * @return ShoppingCartItemVO1
     */
    public ViewObjectImpl getShoppingCartItem1() {
        return (ViewObjectImpl)findViewObject("ShoppingCartItem1");
    }

    /**
     * Container's getter for ShoppingCartShoppingCartItemsLink1.
     * @return ShoppingCartShoppingCartItemsLink1
     */
    public ViewLinkImpl getShoppingCartShoppingCartItemsLink1() {
        return (ViewLinkImpl)findViewLink("ShoppingCartShoppingCartItemsLink1");
    }
}
