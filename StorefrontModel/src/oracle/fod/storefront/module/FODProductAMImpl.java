package oracle.fod.storefront.module;

import oracle.fod.storefront.module.common.FODProductAM;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 09 09:13:18 MDT 2008
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FODProductAMImpl extends BaseApplicationModuleImpl implements FODProductAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FODProductAMImpl() {
    }

    /**
     * Container's getter for BrowseCategory1.
     * @return BrowseCategory1
     */
    public ViewObjectImpl getBrowseCategory1() {
        return (ViewObjectImpl)findViewObject("BrowseCategory1");
    }


    public void setCurrentCategory(Number categoryId, Number subCategoryId) {
            ViewObject vo;

            System.out.print("CATEGORY_ID = ");
            System.out.println(categoryId);
            System.out.print("SUB_CATEGORY_ID = ");
            System.out.println(subCategoryId);

            /* Bind the category and product views
             * but only rebind if the bind variables values have changed.
             * This prevents excessive query executions
             */
            vo = getBrowseCategory1();
            if (!vo.isExecuted()) {
                vo.executeQuery();
            }
            if (categoryId != null) {
                Key key = new Key(new Object[] { categoryId });
                Row[] rows = vo.findByKey(key, 1);
                if (rows != null && rows.length > 0)
                    vo.setCurrentRow(rows[0]);
            } else {
                vo.first();
            }


            vo = getBrowseSubCategory1();
            if (!vo.isExecuted())
                vo.executeQuery();
            if (subCategoryId != null) {
                Key key = new Key(new Object[] { subCategoryId });
                Row[] rows = vo.findByKey(key, 1);
                if (rows != null && rows.length > 0)
                    vo.setCurrentRow(rows[0]);
            } else {
                vo.first();
            }
            
            vo = getBrowseProduct1();
            if (!vo.isExecuted()) 
                vo.executeQuery();
        }

    /**
     * Container's getter for BrowseSubCategory1.
     * @return BrowseSubCategory1
     */
    public ViewObjectImpl getBrowseSubCategory1() {
        return (ViewObjectImpl)findViewObject("BrowseSubCategory1");
    }

    /**
     * Container's getter for BrowseCategoriesSubCategoriesLink1.
     * @return BrowseCategoriesSubCategoriesLink1
     */
    public ViewLinkImpl getBrowseCategoriesSubCategoriesLink1() {
        return (ViewLinkImpl)findViewLink("BrowseCategoriesSubCategoriesLink1");
    }


    /**
     * Container's getter for BrowseProduct1.
     * @return BrowseProduct1
     */
    public ViewObjectImpl getBrowseProduct1() {
        return (ViewObjectImpl)findViewObject("BrowseProduct1");
    }

    /**
     * Container's getter for SubCategoriesProductsLink1.
     * @return SubCategoriesProductsLink1
     */
    public ViewLinkImpl getSubCategoriesProductsLink1() {
        return (ViewLinkImpl)findViewLink("SubCategoriesProductsLink1");
    }

    /**
     * Container's getter for BrowseProductVO1.
     * @return BrowseProductVO1
     */
    public ViewObjectImpl getBrowseProduct() {
        return (ViewObjectImpl)findViewObject("BrowseProduct");
    }
}
